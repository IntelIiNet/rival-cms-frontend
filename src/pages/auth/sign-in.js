/* eslint-disable react-hooks/rules-of-hooks */
import React, { useState, useContext } from "react";
import Head from "next/head";
import styles from "@/styles/SignIn.module.css";
import {
  Box,
  Button,
  Card,
  CardContent,
  Container,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Grid,
  SvgIcon,
  TextField,
  Typography,
} from "@mui/material";
import LockOutlinedIcon from "@mui/icons-material/LockOutlined";
import EmailOutlinedIcon from "@mui/icons-material/EmailOutlined";
import { useRouter } from "next/router";
import toasterContext from "../../utils/context/tosterContext";
import axios from "axios";
import Link from "next/link";

const signIn = () => {
  const route = useRouter();
  const [userDetails, setUserDetails] = useState({});
  const [loading, setLoading] = useState(false);
  const [openDialog, setOpenDialog] = useState(false);
  const fireToasterContext = useContext(toasterContext);

  const handleChange = (evnet) => {
    setUserDetails({
      ...userDetails,
      [event.target.name]: event.target.value,
    });
  };

  console.log("userDetails", userDetails);

  const handleOpenDialog = () => {
    setOpenDialog(true);
  };

  const handleVerifyAccount = () => {
    const url = `${process.env.NEXT_PUBLIC_API_URL}/users/verifyCode`;
    const codeVerificationData = {
      code: userDetails.code,
      email: userDetails.email,
    };
    axios
      .post(url, codeVerificationData)
      .then((response) => {
        console.log("Response of code varificatiion:", response);
        fireToasterContext.fireToasterHandler(true, `Email is Verified`);
        localStorage.setItem("loggedInUser", JSON.stringify(response));
        setOpenDialog(false);
      })

      .catch((error) => {
        console.error("Error:", error);
        fireToasterContext.fireToasterHandler(
          false,
          error.response.data.message
        );
      });
  };

  const userLogin = async () => {
    setLoading(true);
    const url = `${process.env.NEXT_PUBLIC_API_URL}/users/token`;

    await axios
      .post(url, userDetails)
      .then((response) => {
        console.log("Response of code login:", response);
        localStorage.setItem("token", response.data.access_token);
        localStorage.setItem(
          "user_permission",
          JSON.stringify(response.data.user)
        );

        const token = response.data.access_token;

        // Set the token as an HttpOnly cookie using document.cookie
        document.cookie = `token=${token}; path=/`;
        setLoading(false);
        //  fireToasterContext.fireToasterHandler(true, `User is ${response.data}`);
        route.push("/view-site");
      })

      .catch((error) => {
        fireToasterContext.fireToasterHandler(
          false,
          error?.response?.data?.message
        );

        console.error("Error:", error);
      });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    userLogin();
  };

  return (
    <>
      <Head>
        <title>Sign In</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main}`}>
        <div className={styles["rival-cms-container"]}>
          <Typography
            variant="body1"
            component="span"
            gutterBottom
            className={`${styles["link"]}`}
            style={{ color: "#3ec1b9" }}
          >
            Grait
          </Typography>
          <Typography
            variant="body1"
            component="span"
            gutterBottom
            className={`${styles["link"]}`}
            style={{ color: "#104c62" }}
          >
            Deals
          </Typography>
        </div>
        <Container
          maxWidth="sm"
          sx={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            flexDirection: "column",
          }}
        >
          <Card>
            <CardContent>
              <Container>
                <Box
                  component="form"
                  noValidate
                  onSubmit={(event) => handleSubmit(event)}
                  sx={{ mt: 3 }}
                >
                  <Grid container spacing={2}>
                    <Grid item xs={12}>
                      <Box
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          mb: 2,
                        }}
                      >
                        <SvgIcon sx={{ mr: 2 }}>
                          <EmailOutlinedIcon color="#2A4365" />
                        </SvgIcon>
                        <Box>
                          <Typography className={`${styles["email-address"]}`}>
                            Email Address
                          </Typography>
                        </Box>
                        <Box
                          sx={{
                            ml: "145px",
                          }}
                        >
                          <Button onClick={handleOpenDialog}>
                            Verfiy your email
                          </Button>
                        </Box>
                      </Box>
                      <TextField
                        required
                        fullWidth
                        name="email"
                        autoComplete="email"
                        onChange={(event) => handleChange(event)}
                        sx={{
                          backgroundColor: "#EDF2F7",
                          borderRadius: "5px",
                          height: "70px",
                          "& fieldset": {
                            border: "none",
                          },
                        }}
                      />
                    </Grid>
                    <Grid item xs={12}>
                      <Box
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          mb: 2,
                        }}
                      >
                        <SvgIcon sx={{ mr: 2 }}>
                          <LockOutlinedIcon color="#2A4365" />
                        </SvgIcon>
                        <Box>
                          <Typography className={`${styles["email-address"]}`}>
                            Password
                          </Typography>
                        </Box>
                      </Box>
                      <TextField
                        required
                        fullWidth
                        name="password"
                        type="password"
                        autoComplete="new-password"
                        onChange={(event) => handleChange(event)}
                        sx={{
                          backgroundColor: "#EDF2F7",
                          borderRadius: "5px",
                          height: "70px",
                          "& fieldset": {
                            border: "none",
                          },
                        }}
                      />
                    </Grid>
                    <Grid
                      item
                      xs={6}
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        my: 3,
                      }}
                    >
                      <Link
                        href="/auth/forget-password"
                        style={{
                          textDecoration: "none",
                        }}
                      >
                        <Typography className={`${styles["forget-password"]}`}>
                          Forget Password ?
                        </Typography>
                      </Link>
                    </Grid>
                    <Grid item xs={6} sx={{ my: 3 }}>
                      <Button
                        type="submit"
                        fullWidth
                        variant="contained"
                        sx={{
                          height: "61px",
                          backgroundColor: "#3ec1b9",
                          color: "white",
                          fontWeight: 700,
                          borderRadius: "5px",
                          textTransform: "capitalize",
                        }}
                      >
                        {loading ? "Loading..." : "  Sign in"}
                      </Button>
                    </Grid>
                  </Grid>
                  <Button
                    fullWidth
                    variant="outlined"
                    className={`${styles["dont-have-acc-btn"]}`}
                    sx={{
                      height: "61px",
                      borderRadius: "10px",
                      textTransform: "capitalize",
                    }}
                    onClick={() => route.push("/auth/sign-up")}
                  >
                    Sign up
                  </Button>
                </Box>
              </Container>
            </CardContent>
          </Card>
        </Container>

        {openDialog && (
          <Dialog
            open={openDialog}
            onClose={() => setOpenDialog(false)}
            fullWidth
          >
            <DialogTitle
              sx={{
                backgroundColor: "#2C5282",
                color: "white",
                fontFamily: "Poppins-semibold",
                fontSize: "16px",
              }}
            >
              Code Verification
            </DialogTitle>
            <DialogContent dividers>
              <TextField
                id="outlined-basic"
                label="Email"
                fullWidth
                placeholder="Enter your email address"
                variant="outlined"
                name="email"
                type="email"
                sx={{ mb: 2 }}
                onChange={(event) => handleChange(event)}
                InputProps={{
                  shrink: true,
                }}
              />
              <TextField
                id="outlined-basic"
                label="Confirmation Code"
                fullWidth
                placeholder="Enter Code"
                variant="outlined"
                name="code"
                type="number"
                onChange={(event) => handleChange(event)}
                InputProps={{
                  shrink: true,
                }}
              />
            </DialogContent>
            <DialogActions>
              <Button type="submit" onClick={() => setOpenDialog(false)}>
                Cancel
              </Button>
              <Button
                disabled={!userDetails.code || !userDetails.email}
                type="submit"
                sx={
                  loading
                    ? {
                        color: "white",
                        fontSize: "15px",
                        background: "#979797",
                        borderRadius: "10px",
                        backgroundColor: "secondary.main",
                        "&:hover": { backgroundColor: "#979797" },
                        "&:disabled": {
                          backgroundColor: "#979797",
                        },
                      }
                    : {
                        color: "white",
                        fontSize: "15px",
                        backgroundColor: "primary.main",
                        borderRadius: "10px",

                        textTransform: "capitalize",
                        "&:hover": {
                          backgroundColor: "primary.main",
                          boxShadow: 3,
                        },
                        "&:disabled": {
                          backgroundColor: "#979797",
                        },
                      }
                }
                onClick={handleVerifyAccount}
              >
                {loading ? "Loading..." : "Verify Account"}
              </Button>
            </DialogActions>
          </Dialog>
        )}
      </main>
    </>
  );
};

export default signIn;
