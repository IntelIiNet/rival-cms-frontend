/* eslint-disable react-hooks/rules-of-hooks */
import React, { useState } from "react";
import { Layout } from "../layouts/dashboard/layout";
import Head from "next/head";
import QuillNoSSRWrapper from "../components/Editor";
// import EditorLexcial from "../components/EditorLexcial";
import {
  Button,
  Card,
  CardActions,
  CardContent,
  Container,
  InputBase,
  TextField,
  Typography,
} from "@mui/material";
import PermMediaIcon from "@mui/icons-material/PermMedia";
import { Box } from "@mui/system";
import { useDropzone } from "react-dropzone";
import Image from "next/image";
import axios from "axios";
const writeBlog = () => {
  const modules = {
    toolbar: [
      [{ header: [1, 2, 3, 4, 5, 6] }],
      [{ size: [] }],
      ["bold", "italic", "underline", "strike", "blockquote", "CustomButton"],
      [
        { list: "ordered" },
        { list: "bullet" },
        { indent: "-1" },
        { indent: "+1" },
      ],
      ["clean"],
      [{ align: [] }],

      [{ color: [] }, { background: [] }],
    ],
    clipboard: {
      matchVisual: false,
    },
  };
  const formats = [
    "header",
    "font",
    "size",
    "bold",
    "italic",
    "underline",
    "strike",
    "blockquote",
    "list",
    "bullet",
    "indent",
    "link",
    "image",
    "video",
    "color",
    "background",
  ];

  const [textAreaData, setTextAreaData] = useState();
  const [imageUrl, setImageUrl] = useState();
  const [loading, setLoading] = useState(false);
  console.log("textAreaData", textAreaData);

  const handleChange = (e) => {
    const editorData = e;
    setTextAreaData(editorData);
  };

  const handlePublishhBlog = async () => {
    if (textAreaData === undefined) {
      alert("Please write a blog ");
      return; // Return to exit the function early if there's no data
    }

    let finalData = {
      data: {
        name: textAreaData,
      },
      status: "Published",
    };

    try {
      const response = await axios.post(
        `${process.env.NEXT_PUBLIC_API_URL}/blog`,
        finalData
      );

      console.log("publishing blog response", response.data);
      // Access response.data to see the data returned by the server

      // ...
    } catch (error) {
      console.error("Error publishing blog:", error);
    }
  };

  const handleImageUpload = async (file) => {
    console.log("fiine in function", file);
    setLoading(true);
    try {
      const formData = new FormData();
      formData.append("file", file);

      const response = await axios.post(
        `${process.env.NEXT_PUBLIC_API_URL}/image-upload/upload`,
        formData
      );
      console.log("iamges reponse", response);

      if (response && response.data) {
        setLoading(false);
        const imageUrl = response.data.url;
        setImageUrl(imageUrl);
        localStorage.setItem("url", imageUrl);
      } else {
        console.error("Failed to upload image.");
      }
    } catch (error) {
      console.error("Error uploading image:", error);
    }
  };

  const handleChangeSelectImage = (acceptedFiles) => {
    console.log("acceptedFiles", acceptedFiles);
    acceptedFiles.forEach((file) => {
      console.log("files", file);
      handleImageUpload(file);
    });
  };

  const { getRootProps, getInputProps } = useDropzone({
    onDrop: handleChangeSelectImage,
    accept: "image/*, audio/*, video/*",
  });

  return (
    <Layout>
      <Head>
        <title>write a new blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main style={{ height: "90vh" }}>
        <Container sx={{ mt: "110px" }}>
          {/* <EditorLexcial /> */}
          <Typography
            variant="h2"
            sx={{
              paddingLeft: "50px",
              fontSize: "40px",
              fontWeight: "bold",
              pt: 4,
              pb: 0,
              textAlign: "center",
              mb: 1,
              mr: "122px",
            }}
          >
            Write Blog here
          </Typography>

          <Card>
            <CardContent sx={{ maxHeight: "100%" }}>
              <Box
                {...getRootProps()}
                sx={{
                  my: 3,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "flex-end",
                }}
              >
                <input {...getInputProps()} />
                <Box>
                  <Box>
                    <Button
                      startIcon={<PermMediaIcon />}
                      variant="contained"
                      component="label"
                      sx={{
                        backgroundColor: "#40c1b9",
                        color: "white",
                      }}
                    >
                      {loading ? "Loading..." : "Add Media"}

                      <input multiple type="file" hidden {...getInputProps()} />
                    </Button>
                  </Box>
                </Box>
              </Box>
              {imageUrl && (
                <Typography
                  sx={{ pb: 1 }}
                >{`Selected Image: ${imageUrl.substring(
                  imageUrl.lastIndexOf("/") + 1
                )}`}</Typography>
              )}
              <Image
                src={imageUrl}
                alt="blog-img"
                width={100}
                height={100}
                style={{
                  display: "none",
                }}
              />
              <div>
                <QuillNoSSRWrapper
                  modules={modules}
                  formats={formats}
                  theme="snow"
                  onChange={handleChange}
                  placeholder="Start Typing"
                  style={{ height: "410px" }}
                />
              </div>
            </CardContent>
            <CardActions
              sx={{ display: "flex", justifyContent: "flex-end", mt: 4 }}
            >
              <Button
                onClick={handlePublishhBlog}
                disabled={textAreaData === undefined}
                sx={{
                  backgroundColor: "#40c1b9",
                  color: "white",
                  width: "135px",
                  height: "42px",
                  "&:hover": {
                    boxShadow: 4,
                    backgroundColor: "#40c1b9",
                    color: "white",
                  },
                }}
              >
                Publish
              </Button>
            </CardActions>
          </Card>
        </Container>
      </main>
    </Layout>
  );
};
export default writeBlog;
