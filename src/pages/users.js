/* eslint-disable react-hooks/rules-of-hooks */
import React, { useState, useEffect, useContext } from "react";
import { Layout } from "../layouts/dashboard/layout";
import Head from "next/head";
import axios from "axios";
import {
  Typography,
  TableRow,
  TableHead,
  Paper,
  Table,
  TableBody,
  TableCell,
  IconButton,
  InputBase,
  Button,
  Grid,
  Box,
  Avatar,
  TablePagination,
  Container,
  DialogActions,
  DialogContent,
  DialogTitle,
  Dialog,
} from "@mui/material";
import {
  DeleteOutlineOutlined,
  EditOutlined,
  Search,
} from "@mui/icons-material";
import { userHeading, tableLoaderBox } from "./muiUserStyle";
import AddUserDialog from "../components/AddUser";
import EditUserDialog from "../components/EditUserDialog";
import ToasterContext from "@/utils/context/tosterContext";

export default function User() {
  const [rows, setRows] = useState([]);
  const [page, setPage] = React.useState(0);
  const [loading, setLoading] = useState(true);
  const [selectedUser, setSelectedUser] = useState();
  const [searchResult, setSearchResult] = useState("");
  const fireToasterContext = useContext(ToasterContext);
  const [rowsPerPage, setRowsPerPage] = React.useState(10);
  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);
  const [openAddUserDialog, setOpenAddUserDialog] = useState(false);
  const [openEditUserDialog, setOpenEditUserDialog] = useState(false);
  const [permission, setPermission] = useState({});

  console.log("selectedUser", selectedUser);

  const getUsersList = async () => {
    const token = localStorage.getItem("token");
    const response = await axios.get(
      `${process.env.NEXT_PUBLIC_API_URL}/users`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    setRows(response.data);
    setLoading(false);
    console.log("response", response);
  };

  useEffect(() => {
    const permission = JSON.parse(localStorage.getItem("user_permission"));
    setPermission(permission);
    getUsersList();
  }, []);

  const handleApiRes = (response) => {
    if (response.status) {
      getUsersList();
    }
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(+event.target.value);
    setPage(0);
  };

  const handleCloseEditDialog = () => {
    setOpenEditUserDialog(false);
    setOpenAddUserDialog(false);
  };
  const handleEditUser = (data) => {
    setOpenEditUserDialog(true);
    setSelectedUser(data);
  };

  const handleOpenDeleteDial = (userProfile) => {
    setOpenDeleteDialog(true);
    setSelectedUser(userProfile);
  };

  const handleDeleteSelectedUser = async () => {
    console.log("delete selected user");
    setLoading(true);
    const token = localStorage.getItem("token");
    try {
      const response = await axios.delete(
        `${process.env.NEXT_PUBLIC_API_URL}/users/${selectedUser.id}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      console.log("deelte response", response);
      setLoading(false);
      getUsersList();
      setOpenDeleteDialog(false);
      fireToasterContext.fireToasterHandler(true, response.data);
    } catch (error) {
      fireToasterContext.fireToasterHandler(
        false,
        error?.response?.data?.message
      );
      console.error("Error delete blog:", error);
    }
  };

  const handleSearch = (event) => {
    setSearchResult(event.target.value);
  };

  return (
    <Layout>
      <Head>
        <title>Users</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container sx={{ mt: 10 }}>
          <Grid spacing={2} container>
            <Grid
              item
              lg={
                permission.user_role === "Reader" ||
                permission.user_role === "Writer"
                  ? 12
                  : 10
              }
              md={8}
              sm={8}
              xs={12}
            >
              <InputBase
                onChange={(event) => handleSearch(event)}
                sx={{
                  width: "100%",
                  height: "48px",
                  borderRadius: 2,
                  backgroundColor: "#EDF2F7",
                }}
                placeholder={"Search User"}
                inputProps={{ "aria-label": "search" }}
                startAdornment={
                  <Search
                    sx={{
                      color: "rgba(151, 151, 151, 0.68);",
                      marginLeft: "6px",
                    }}
                  />
                }
              />
            </Grid>
            <Grid
              item
              lg={2}
              md={4}
              sm={4}
              xs={12}
              sx={{
                display:
                  permission.user_role === "Reader" ||
                  permission.user_role === "Writer"
                    ? "none"
                    : null,
              }}
            >
              <Button
                onClick={() => setOpenAddUserDialog(true)}
                disableRipple
                fullWidth
                sx={{
                  backgroundColor: "#2a4365",
                  color: "white",
                  height: "48px",
                  "&:hover": {
                    boxShadow: 4,
                    backgroundColor: "#2a4365",
                    color: "white",
                  },
                }}
              >
                <Typography sx={userHeading} variant="userHeadingBoldButton">
                  Create a new user
                </Typography>
              </Button>
            </Grid>
          </Grid>

          <Box
            component={Paper}
            elevation={0}
            sx={{
              marginTop: "30px",
              maxHeight: 650,
              borderRadius: "10px",
              [`::-webkit-scrollbar`]: {
                width: "0px",
                background: "transparent",
              },
            }}
          >
            <Table stickyHeader aria-label="sticky table">
              <TableHead sx={{ backgroundColor: "#2C5282" }}>
                <TableRow>
                  {loading ? null : (
                    <>
                      <TableCell
                        sx={{
                          backgroundColor: "#2C5282",
                        }}
                      >
                        <Typography
                          sx={userHeading}
                          variant="userTableHeadingBold"
                        >
                          Name
                        </Typography>
                      </TableCell>
                      <TableCell sx={{ backgroundColor: "#2C5282" }}>
                        <Typography
                          sx={userHeading}
                          variant="userTableHeadingBold"
                        >
                          Verified User
                        </Typography>
                      </TableCell>
                      <TableCell sx={{ backgroundColor: "#2C5282" }}>
                        <Typography
                          sx={userHeading}
                          variant="userTableHeadingBold"
                        >
                          Phone
                        </Typography>
                      </TableCell>
                      <TableCell sx={{ backgroundColor: "#2C5282" }}>
                        <Typography
                          sx={userHeading}
                          variant="userTableHeadingBold"
                        >
                          Email
                        </Typography>
                      </TableCell>
                      <TableCell sx={{ backgroundColor: "#2C5282" }}>
                        <Typography
                          sx={{
                            ...userHeading,
                            display:
                              permission.user_role === "Reader" ||
                              permission.user_role === "Writer"
                                ? "none"
                                : null,
                          }}
                          variant="userTableHeadingBold"
                        >
                          Action
                        </Typography>
                      </TableCell>
                    </>
                  )}
                </TableRow>
              </TableHead>
              <TableBody>
                {loading ? (
                  <TableRow>
                    <Box style={tableLoaderBox}>loading...</Box>
                  </TableRow>
                ) : rows && rows?.length < 1 ? (
                  <TableRow>
                    <Box style={tableLoaderBox}>
                      <Typography sx={userHeading} variant="userTableCellName">
                        No User Available
                      </Typography>
                    </Box>
                  </TableRow>
                ) : (
                  rows &&
                  rows
                    ?.filter((u) => {
                      const searchValue = searchResult?.toLowerCase() || "";
                      const titleMatch = u?.name
                        .toLowerCase()
                        .includes(searchValue);

                      return titleMatch;
                    })
                    ?.slice(
                      page * rowsPerPage,
                      page * rowsPerPage + rowsPerPage
                    )
                    .map((row) => (
                      <TableRow
                        hover
                        key={row.id}
                        sx={{
                          "&:last-child td, &:last-child th": { border: 0 },
                        }}
                      >
                        <TableCell
                          sx={{
                            padding: "18px",
                          }}
                          component="th"
                          scope="row"
                        >
                          <Box
                            sx={{
                              display: "flex",
                              justifyContent: "flex-start",
                              alignItems: "center",
                            }}
                          >
                            <Avatar
                              sx={{
                                backgroundColor: "background.bgLayoutA",
                                color: "white",
                                marginRight: "10px",
                                textTransform: "uppercase",
                                backgroundColor: "secondary.main",
                              }}
                            >
                              {row?.name.slice(0, 1)}
                            </Avatar>
                            <Typography
                              sx={userHeading}
                              variant="userTableCellName"
                            >
                              {row?.name}
                            </Typography>
                          </Box>
                        </TableCell>
                        <TableCell>
                          {row.is_verified.toString() === "true" ? "Yes" : "No"}
                        </TableCell>

                        <TableCell>
                          {row.phone === null ? "N/A" : row.phone}
                        </TableCell>
                        <TableCell>{row.email}</TableCell>

                        <TableCell>
                          <Box>
                            <span
                              style={{
                                display: "flex",
                                alignItems: "center",
                                gap: "10px",
                                visibility:
                                  permission.user_role === "Reader" ||
                                  permission.user_role === "Writer"
                                    ? "hidden"
                                    : "visible",
                              }}
                            >
                              <IconButton
                                sx={{
                                  backgroundColor: "#2C5282",
                                  "&:hover": {
                                    backgroundColor: "#2C5282",
                                  },
                                }}
                                onClick={() => {
                                  handleEditUser(row);
                                }}
                              >
                                <EditOutlined sx={{ color: "white" }} />
                              </IconButton>
                              <IconButton
                                sx={{
                                  backgroundColor: "#2C5282",
                                  "&:hover": {
                                    backgroundColor: "#2C5282",
                                  },
                                }}
                                onClick={() => {
                                  handleOpenDeleteDial(row);
                                }}
                              >
                                <DeleteOutlineOutlined
                                  sx={{ color: "white" }}
                                />
                              </IconButton>
                            </span>
                          </Box>
                        </TableCell>
                      </TableRow>
                    ))
                )}
              </TableBody>
            </Table>
          </Box>
          <TablePagination
            rowsPerPageOptions={[5, 10, 25, 100]}
            component="div"
            count={rows ? rows.length : 0}
            rowsPerPage={rowsPerPage}
            page={page}
            onPageChange={handleChangePage}
            onRowsPerPageChange={handleChangeRowsPerPage}
          />
        </Container>
      </main>

      {openAddUserDialog && (
        <AddUserDialog
          open={openAddUserDialog}
          handleCloseEditDialog={handleCloseEditDialog}
          handleApiRes={handleApiRes}
        />
      )}
      {openEditUserDialog && (
        <EditUserDialog
          open={openEditUserDialog}
          user={selectedUser}
          handleCloseEditDialog={handleCloseEditDialog}
          handleApiRes={handleApiRes}
        />
      )}
      {openDeleteDialog && (
        <Dialog
          open={openDeleteDialog}
          onClose={() => setOpenDeleteDialog(false)}
          fullWidth
        >
          <DialogTitle
            sx={{
              backgroundColor: "#2C5282",
              color: "white",
              fontFamily: "Poppins-semibold",
              fontSize: "16px",
            }}
          >
            Delete User
          </DialogTitle>
          <DialogContent dividers>
            <Typography
              variant="caption"
              sx={{ fontFamily: "Poppins", fontSize: "14px" }}
            >
              This action cannot be undone. Do you want to perform this action
              <b>&quot;{selectedUser.name}&quot;</b> ?
            </Typography>
          </DialogContent>
          <DialogActions>
            <Button type="submit" onClick={() => setOpenDeleteDialog(false)}>
              Cancel
            </Button>
            <Button
              type="submit"
              sx={
                loading
                  ? {
                      color: "white",
                      fontSize: "15px",
                      background: "#979797",
                      borderRadius: "10px",
                      backgroundColor: "secondary.main",
                      "&:hover": { backgroundColor: "#979797" },
                      "&:disabled": {
                        backgroundColor: "#979797",
                      },
                    }
                  : {
                      color: "white",
                      fontSize: "15px",
                      backgroundColor: "primary.main",
                      borderRadius: "10px",

                      textTransform: "capitalize",
                      "&:hover": {
                        backgroundColor: "primary.main",
                        boxShadow: 3,
                      },
                      "&:disabled": {
                        backgroundColor: "#979797",
                      },
                    }
              }
              onClick={handleDeleteSelectedUser}
            >
              {loading ? "Loading..." : "Delete User Profile"}
            </Button>
          </DialogActions>
        </Dialog>
      )}
    </Layout>
  );
}
